
BEGIN
  FOR t IN (
    SELECT table_name FROM user_tables
    WHERE table_name IN (
      'FARM','HARVESTER','CONSIGNMENT','LAB_RESULT',
      'DELIV_STG','LAB_STG','EXCEPTION_LOG',
      'PAYMENT_RUN','PAYMENT_LINE','JOB_RUN'
    )
  ) LOOP
    EXECUTE IMMEDIATE 'DROP TABLE '||t.table_name||' CASCADE CONSTRAINTS PURGE';
  END LOOP;
END;
/

CREATE TABLE farm (
  farm_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  farm_code    VARCHAR2(10) NOT NULL UNIQUE,
  grower_name  VARCHAR2(100) NOT NULL
);

CREATE TABLE harvester (
  harvester_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  contractor_name VARCHAR2(100) NOT NULL,
  licence_code    VARCHAR2(20)
);

CREATE TABLE consignment (
  consignment_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ext_ticket_id  VARCHAR2(30),
  farm_id        NUMBER NOT NULL REFERENCES farm(farm_id),
  harvester_id   NUMBER REFERENCES harvester(harvester_id),
  delivered_at   DATE   NOT NULL,
  net_tonnes     NUMBER(8,2) NOT NULL CHECK (net_tonnes >= 0),
  status_code    VARCHAR2(12) DEFAULT 'DRAFT'
                CHECK (status_code IN ('DRAFT','VALID','IN_PRE','APPROVED','PUBLISHED'))
);
CREATE INDEX ix_consignment_farm  ON consignment(farm_id);
CREATE INDEX ix_consignment_date  ON consignment(delivered_at);
CREATE INDEX ix_consignment_ticket ON consignment(ext_ticket_id);

CREATE TABLE lab_result (
  lab_id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  consignment_id NUMBER NOT NULL REFERENCES consignment(consignment_id),
  pol            NUMBER(5,2),
  brix           NUMBER(5,2),
  fibre          NUMBER(5,2),
  created_at     DATE DEFAULT SYSDATE
);

CREATE UNIQUE INDEX ux_lab_result_one_per_cons ON lab_result (consignment_id);


CREATE TABLE deliv_stg (
  stg_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  farm_code     VARCHAR2(10),
  contractor    VARCHAR2(100),
  delivered_at  DATE,
  net_tonnes    NUMBER(8,2),
  ext_ticket_id VARCHAR2(30)
);

CREATE TABLE lab_stg (
  stg_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ext_ticket_id VARCHAR2(30),
  pol           NUMBER(5,2),
  brix          NUMBER(5,2),
  fibre         NUMBER(5,2)
);

CREATE TABLE exception_log (
  exception_id  NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ref_type      VARCHAR2(20),
  ref_id        VARCHAR2(40),
  code          VARCHAR2(30),
  message       VARCHAR2(400),
  created_at    DATE DEFAULT SYSDATE
);

CREATE TABLE payment_run (
  run_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  start_date  DATE NOT NULL,
  end_date    DATE NOT NULL,
  status_code VARCHAR2(12) DEFAULT 'DRAFT'
              CHECK (status_code IN ('DRAFT','APPROVED','PUBLISHED')),
  created_at  DATE DEFAULT SYSDATE
);

CREATE TABLE payment_line (
  line_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  run_id       NUMBER NOT NULL REFERENCES payment_run(run_id),
  farm_id      NUMBER NOT NULL REFERENCES farm(farm_id),
  total_tonnes NUMBER(10,2) NOT NULL,
  avg_pol      NUMBER(5,2),
  rate_per_t   NUMBER(10,2),
  amount_aud   NUMBER(12,2)
);

CREATE TABLE job_run (
  job_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  job_type    VARCHAR2(40),
  status_code VARCHAR2(12) DEFAULT 'OK',
  started_at  DATE DEFAULT SYSDATE,
  finished_at DATE,
  log_text    CLOB
);

INSERT INTO farm (farm_code, grower_name) VALUES ('F001','Jarra Creek Farms');
INSERT INTO farm (farm_code, grower_name) VALUES ('F002','Mulgrave Valley Growers');
INSERT INTO farm (farm_code, grower_name) VALUES ('F003','South Johnstone Ag');

INSERT INTO harvester (contractor_name, licence_code) VALUES ('FNQ Harvesting','H-QLD-88');
INSERT INTO harvester (contractor_name, licence_code) VALUES ('Coastal Cutters','H-QLD-52');
COMMIT;

CREATE OR REPLACE PACKAGE millops_util AS
  PROCEDURE gen_fake_deliveries(p_rows IN NUMBER DEFAULT 25);
  PROCEDURE gen_fake_lab_from_deliv;
  PROCEDURE import_deliv_from_stg;
  PROCEDURE import_lab_from_stg;
  PROCEDURE run_basic_checks(p_days_window IN NUMBER DEFAULT 14);
  PROCEDURE build_payment_prerun(p_start IN DATE, p_end IN DATE);
END millops_util;
/
CREATE OR REPLACE PACKAGE BODY millops_util AS

  PROCEDURE gen_fake_deliveries(p_rows IN NUMBER DEFAULT 25) IS
    v_farm_code    farm.farm_code%TYPE;
    v_contractor   harvester.contractor_name%TYPE;
  BEGIN
    FOR i IN 1..p_rows LOOP
      SELECT farm_code INTO v_farm_code FROM (
        SELECT farm_code FROM farm ORDER BY DBMS_RANDOM.VALUE
      ) WHERE ROWNUM = 1;

      SELECT contractor_name INTO v_contractor FROM (
        SELECT contractor_name FROM harvester ORDER BY DBMS_RANDOM.VALUE
      ) WHERE ROWNUM = 1;

      INSERT INTO deliv_stg (farm_code, contractor, delivered_at, net_tonnes, ext_ticket_id)
      VALUES (
        v_farm_code,
        v_contractor,
        (TRUNC(SYSDATE) - TRUNC(DBMS_RANDOM.VALUE(0,7)))
          + NUMTODSINTERVAL(FLOOR(DBMS_RANDOM.VALUE(5,21)), 'HOUR'),
        ROUND(DBMS_RANDOM.VALUE(18, 42), 1),
        'T' || TO_CHAR(ABS(DBMS_RANDOM.RANDOM), 'FM0000000')
      );
    END LOOP;
    INSERT INTO job_run (job_type, log_text) VALUES ('GEN_FAKE_DELIV','Inserted '||p_rows||' rows into DELIV_STG');
    COMMIT;
  END gen_fake_deliveries;

  PROCEDURE gen_fake_lab_from_deliv IS
  BEGIN
    INSERT INTO lab_stg (ext_ticket_id, pol, brix, fibre)
    SELECT c.ext_ticket_id,
           ROUND(DBMS_RANDOM.VALUE(12.0, 15.0),2) AS pol,
           ROUND(DBMS_RANDOM.VALUE(16.0, 20.0),2) AS brix,
           ROUND(DBMS_RANDOM.VALUE(8.0,  16.0),2) AS fibre
    FROM consignment c
    WHERE c.delivered_at >= TRUNC(SYSDATE) - 14
      AND NOT EXISTS (SELECT 1 FROM lab_result lr WHERE lr.consignment_id = c.consignment_id)
      AND NOT EXISTS (SELECT 1 FROM lab_stg s      WHERE s.ext_ticket_id   = c.ext_ticket_id);
    INSERT INTO job_run (job_type, log_text) VALUES ('GEN_FAKE_LAB','Staged LAB for consignments missing results');
    COMMIT;
  END gen_fake_lab_from_deliv;

  PROCEDURE import_deliv_from_stg IS
  BEGIN
    INSERT INTO consignment (ext_ticket_id, farm_id, harvester_id, delivered_at, net_tonnes, status_code)
    SELECT s.ext_ticket_id,
           f.farm_id,
           h.harvester_id,
           s.delivered_at,
           s.net_tonnes,
           'DRAFT'
    FROM deliv_stg s
    JOIN farm f       ON f.farm_code       = s.farm_code
    LEFT JOIN harvester h ON h.contractor_name = s.contractor;

    DELETE FROM deliv_stg;
    INSERT INTO job_run (job_type, log_text) VALUES ('IMPORT_DELIV','STG -> CONSIGNMENT, cleared STG');
    COMMIT;
  END import_deliv_from_stg;

  PROCEDURE import_lab_from_stg IS
  BEGIN
    MERGE INTO lab_result lr
    USING (
      SELECT consignment_id, pol, brix, fibre
      FROM (
        SELECT c.consignment_id,
               s.pol, s.brix, s.fibre,
               ROW_NUMBER() OVER (PARTITION BY c.consignment_id ORDER BY s.stg_id DESC) rn
        FROM lab_stg s
        JOIN consignment c ON c.ext_ticket_id = s.ext_ticket_id
      )
      WHERE rn = 1
    ) src
    ON (lr.consignment_id = src.consignment_id)
    WHEN MATCHED THEN
      UPDATE SET lr.pol = src.pol,
                 lr.brix = src.brix,
                 lr.fibre = src.fibre,
                 lr.created_at = SYSDATE
    WHEN NOT MATCHED THEN
      INSERT (consignment_id, pol, brix, fibre, created_at)
      VALUES (src.consignment_id, src.pol, src.brix, src.fibre, SYSDATE);

    DELETE FROM lab_stg;
    INSERT INTO job_run (job_type, log_text) VALUES ('IMPORT_LAB','Upserted LAB, cleared STG');
    COMMIT;
  END import_lab_from_stg;

  PROCEDURE run_basic_checks(p_days_window IN NUMBER DEFAULT 14) IS
  BEGIN
    INSERT INTO exception_log (ref_type, ref_id, code, message)
    SELECT 'DELIVERY', TO_CHAR(c.consignment_id), 'MISSING_LAB', 'No lab result for consignment.'
    FROM consignment c
    LEFT JOIN lab_result lr ON lr.consignment_id = c.consignment_id
    WHERE lr.consignment_id IS NULL
      AND c.delivered_at >= TRUNC(SYSDATE) - p_days_window;

    INSERT INTO exception_log (ref_type, ref_id, code, message)
    SELECT 'DELIVERY', TO_CHAR(c.consignment_id), 'BAD_TONNES', 'Net tonnes <= 0'
    FROM consignment c
    WHERE NVL(c.net_tonnes,0) <= 0
      AND c.delivered_at >= TRUNC(SYSDATE) - p_days_window;

    INSERT INTO job_run (job_type, log_text) VALUES ('CHECKS','Wrote exceptions for missing lab & bad tonnes');
    COMMIT;
  END run_basic_checks;

  PROCEDURE build_payment_prerun(p_start IN DATE, p_end IN DATE) IS
    v_run_id NUMBER;
  BEGIN
    INSERT INTO payment_run (start_date, end_date, status_code)
    VALUES (TRUNC(p_start), TRUNC(p_end), 'DRAFT')
    RETURNING run_id INTO v_run_id;

    INSERT INTO payment_line (run_id, farm_id, total_tonnes, avg_pol, rate_per_t, amount_aud)
    SELECT v_run_id,
           c.farm_id,
           ROUND(SUM(c.net_tonnes),2) AS total_tonnes,
           ROUND(AVG(lr.pol),2)       AS avg_pol,
           ROUND(40 * (AVG(lr.pol)/13),2)                  AS rate_per_t,
           ROUND((40 * (AVG(lr.pol)/13)) * SUM(c.net_tonnes),2) AS amount_aud
    FROM consignment c
    JOIN lab_result lr ON lr.consignment_id = c.consignment_id
    WHERE c.delivered_at >= TRUNC(p_start)
      AND c.delivered_at <  TRUNC(p_end) + 1
    GROUP BY c.farm_id;

    INSERT INTO job_run (job_type, log_text) VALUES ('PAYMENT','Built DRAFT payment run '||v_run_id);
    COMMIT;
  END build_payment_prerun;

END millops_util;
/

CREATE OR REPLACE VIEW v_exceptions_recent AS
SELECT *
FROM exception_log
WHERE created_at >= TRUNC(SYSDATE) - 14;

CREATE OR REPLACE VIEW v_payment_summary AS
SELECT pr.run_id, pr.start_date, pr.end_date, pr.status_code,
       SUM(pl.amount_aud)  AS total_amount,
       SUM(pl.total_tonnes) AS total_tonnes
FROM payment_run pr
LEFT JOIN payment_line pl ON pl.run_id = pr.run_id
GROUP BY pr.run_id, pr.start_date, pr.end_date, pr.status_code
ORDER BY pr.run_id DESC;

COMMIT;
